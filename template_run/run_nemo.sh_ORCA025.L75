#!/bin/bash
#SBATCH -C HSW24
#SBATCH --nodes=19
#SBATCH --ntasks=456
#SBATCH --ntasks-per-node=24
#SBATCH --threads-per-core=1
#SBATCH -J run_ORCA025_GNJ002
#SBATCH -e run_nemo.e%j
#SBATCH -o run_nemo.o%j
#SBATCH --time=19:59:00

date

set -x
ulimit -s unlimited

#=================================================================================
#=================================================================================
# 0- User's choices
#=================================================================================
#=================================================================================

CONFIG='ORCA025.L75'  ## FULL CONFIG NAME (e.g. "trop075" or "trop075_nest025")
                      ## NB: THIS NAME SHOULD NOT START WITH A NUMBER

CONFPAR=$CONFIG #- IF NO NEST SHOULD BE EQUAL TO $CONFIG
                #  IF NESTS, SHOULD BE THE ABSOLUTE PARENT CONFIG NAME
                #  (e.g. CONFPAR="trop075" when CONFIG="trop075_nest025")

CASE='GNJ002'   # should not be too long (>15 char.) otherwise, NEMO file names are affected

YEAR0=1958      #- initial state of the long experiment (needs four digits)

YEAR_MAX=2018   #- stop after $YEAR_MAX is completed

NRUN_MAX=70     #- stop after $NRUN_MAX re-submissions

NDAYS=366      #- Split year by slices of $NDAYS days 

WORKDIR=`pwd`

STOCKDIR="$SHAREDELMER"  #- restart, output directory

INPUTDIR="/scratch/shared/egige60/input/nemo_${CONFIG}"  #- input directory

GFDL_SIM='gfdl_nyf_1080_cp2'  # either gfdl_nyf_1080_cp2 (CTRL) or gfdl_nyf_1080_PI_AntEv1_Hterms (SHIFTED)
BDYDIR="${INPUTDIR}/BDY_${GFDL_SIM}"     #- input directory for BDYs
SSSDIR="${INPUTDIR}/SST_SSS_${GFDL_SIM}" #- input directory for SSS relaxation (if any)

#- Netcdf library for small fortran scripts (not for NEMO)
export NC_INC='-I/opt/software/occigen/libraries/netcdf/4.4.0_fortran-4.4.2/hdf5/1.8.17/intel/17.0/openmpi/intel/2.0.1/include'
export NC_LIB='-L/opt/software/occigen/libraries/netcdf/4.4.0_fortran-4.4.2/hdf5/1.8.17/intel/17.0/openmpi/intel/2.0.1/lib -lnetcdf -lnetcdff'

NEMOdir="/home/`whoami`/models/NEMO_3.5_NACHO" # NEMO model directory
XIOSdir="/home/`whoami`/models/xios-1.0" # XIOS directory

FORCINGdir="$STOREDIR/FORCING_SETS/DFS5.2" # Atmospheric forcing

NZOOM=0  # nb of agrif nests (0 if no agrif nest)

##ORCA025## NB_NPROC_XIOS_PER_NODE=2 # Number of core used per xios on each node (should typically be in the 1-3 range).

#=================================================================================
#=================================================================================
# 1- Initialization
#=================================================================================
#=================================================================================

PWDDIR=`pwd`
if [ ! `basename $PWDDIR` == nemo_${CONFIG}_${CASE} ]; then
 echo '~!@#%^&* CHECK CONFIG and CASE in run_nemo.sh >>>>>>>>>> Stop !!'
 exit
fi

export NB_NODES=`echo "${SLURM_NTASKS} / 24" |bc`
##ORCA025##export NB_NPROC_IOS=$(( NB_NODES * NB_NPROC_XIOS_PER_NODE ))
##ORCA025##export NB_NPROC=$(( SLURM_NTASKS - NB_NPROC_IOS ))
export NB_NPROC_IOS=36
export NB_NPROC=420

# { unset initiaux 
unset    OMPI_MCA_ess
#
unset    OMPI_MCA_pml
unset    OMPI_MCA_mtl
unset    OMPI_MCA_mtl_mxm_np 
unset    OMPI_MCA_pubsub  
# }

############################################################
##-- create links to executables :

rm -f nemo.exe
if [ $NZOOM -gt 0 ]; then
  ln -s ${NEMOdir}/CONFIG/${CONFIG}_agrif/BLD/bin/nemo.exe
else
  ln -s ${NEMOdir}/CONFIG/${CONFIG}/BLD/bin/nemo.exe
fi

rm -f xios_server.exe
ln -s ${XIOSdir}/bin/xios_server.exe

##############################################
##-- define current year and nb of days

if [ -f prod_nemo.db ]; then
read NRUN YEAR MONTH DAY NITENDM1 NITENDM1ZOOM << EOF
`tail -1 prod_nemo.db`
EOF
else
echo "1 ${YEAR0} 01 01 0" > prod_nemo.db
YEAR=${YEAR0}
MONTH=01
DAY=01
NRUN=1
NITENDM1=0  ## last time step of previous run
## add last time step of previous runs on children domains 
## at the end of the line in prod_nemo.db :
for iZOOM in $(seq 1 ${NZOOM})
do
  sed -e "s/$/ 0/g" prod_nemo.db > tmp
  mv tmp prod_nemo.db
done
fi

if [ $YEAR -gt ${YEAR_MAX} ]; then
  echo " "
  echo "Year greater then YEAR_MAX >>>>>>>> stop !!"
  exit
fi

if [ $NRUN -gt ${NRUN_MAX} ]; then
  echo " "
  echo "Nb of re-submission greater then NRUN_MAX >>>>>>>> stop !!"
  exit
fi

#####
# adjust nb of days to finish at the end of the year
ISLEAP=`grep nn_leapy namelist_nemo_GENERIC_${CONFIG} | awk '{print $3}'`
if [ $ISLEAP == 1 ]; then
if [ ! -f calculate_end_date ]; then
  ifort -o calculate_end_date calculate_end_date.f90
fi
echo "$YEAR $MONTH $DAY $NDAYS" > start_date_duration
read YEARf MONTHf DAYf NDAYScorr << EOF
`./calculate_end_date`
EOF
if [ $NDAYScorr -ne $NDAYS ]; then
 echo "Adjusting run length to finish at the end of current year"
 NDAYS=$NDAYScorr
 echo "$YEAR $MONTH $DAY $NDAYS" > start_date_duration
read YEARf MONTHf DAYf NDAYScorr << EOF
`./calculate_end_date`
EOF
fi
else
if [ ! -f calculate_end_date_noleap ]; then
  ifort -o calculate_end_date_noleap calculate_end_date_noleap.f90
fi
echo "$YEAR $MONTH $DAY $NDAYS" > start_date_duration
read YEARf MONTHf DAYf NDAYScorr << EOF
`./calculate_end_date_noleap`
EOF
if [ $NDAYScorr -ne $NDAYS ]; then
 echo "Adjusting run length to finish at the end of current year"
 NDAYS=$NDAYScorr
 echo "$YEAR $MONTH $DAY $NDAYS" > start_date_duration
read YEARf MONTHf DAYf NDAYScorr << EOF
`./calculate_end_date_noleap`
EOF
fi
fi
echo " -> Run duration = $NDAYS days"
echo " "

##-- calculate corresponding number of time steps for NEMO:
RN_DT=`grep "rn_rdt " namelist_nemo_GENERIC_${CONFPAR} |grep 'step' |cut -d '=' -f2 | cut -d '!' -f1 | sed -e "s/ //g"`
NIT000=`echo "$NITENDM1 + 1" | bc`
NITEND=`echo "$NITENDM1 + ${NDAYS} * 86400 / ${RN_DT}" | bc`

echo "****************************************************"
echo "*          NEMO SIMULATION                          "
echo "*   config  $CONFIG                                 "
echo "*   case    $CASE                                   "
echo "*   from    ${DAY}/${MONTH}/${YEAR}                 "
echo "*   to      ${DAYf}/${MONTHf}/${YEARf}              "
echo "*   i.e. step $NIT000 to $NITEND (for mother grid)  "
echo "*                                                   "
echo "*   total number of tasks >>>>> ${SLURM_NTASKS}     "
echo "*   number of xios tasks  >>>>> ${NB_NPROC_IOS}     "
echo "*                                                   "
echo "****************************************************"
echo " "
date
echo " "

#####################################################################
##-- create executable and rebuild namelist to rebuild restart files

rm -f rebuild_nemo.exe
#ln -s ${NEMOdir}/TOOLS/REBUILD_NEMO/BLD/bin/rebuild_nemo.exe
ln -s /home/njourd/models/nemo_r5151_UKMO_ISF_r5932_nj/NEMOGCM/TOOLS/REBUILD_NEMO/BLD/bin/rebuild_nemo.exe

###############################################################
##-- edit NEMO's namelist

echo "Editing namelist..."

rm -f namelist

if [ $NRUN -gt 1 ] || [ $CONFIG == "trop075" ]; then
  sed -e "s/RESTNEM/\.true\./g"  namelist_nemo_GENERIC_${CONFPAR} > namelist
  RST=1
else
  sed -e "s/RESTNEM/\.false\./g" namelist_nemo_GENERIC_${CONFPAR} > namelist
  RST=0
fi

##- Specific treatment for TROP075's restart/initial state:
if [ $NRUN -eq 1 ] && [ $CONFIG == "trop075" ]; then
  sed -e "s/AAAA/  0 /g" namelist > tmp
  mv -f tmp namelist
else
  sed -e "s/AAAA/  2 /g"  namelist > tmp
  mv -f tmp namelist
fi

sed -e "s/CCCC/${CONFIG}/g ; s/OOOO/${CASE}/g ; s/IIII/${YEAR0}0101/g ; s/NIT000/${NIT000}/g ; s/NITEND/${NITEND}/g ; s/NRUN/${NRUN}/g" namelist > tmp
mv -f tmp namelist

for iZOOM in $(seq 1 $NZOOM)
do
  echo "Editing ${iZOOM}_namelist..."
  rm -f ${iZOOM}_namelist
  if [ $NRUN -gt 1 ] || [ $CONFIG == "trop075" ]; then
    sed -e "s/RESTNEM/\.true\./g"  ${iZOOM}_namelist_nemo_GENERIC_${CONFPAR} > ${iZOOM}_namelist
    RST=1
  else
    sed -e "s/RESTNEM/\.false\./g" ${iZOOM}_namelist_nemo_GENERIC_${CONFPAR} > ${iZOOM}_namelist
    RST=0
  fi
  ##- Specific treatment for TROP075's restart/initial state:
  if [ $NRUN -eq 1 ] && [ $CONFIG == "trop075" ]; then
    sed -e "s/AAAA/  0 /g" ${iZOOM}_namelist > tmp
    mv -f tmp ${iZOOM}_namelist
  else
    sed -e "s/AAAA/  2 /g"  ${iZOOM}_namelist > tmp
    mv -f tmp ${iZOOM}_namelist
  fi
  ##- calculate initial and last time step for the child domains :
  ##-- calculate corresponding number of time steps for NEMO:
  RN_DT_ZOOM=`grep "rn_rdt " ${iZOOM}_namelist_nemo_GENERIC_${CONFIG} |cut -d '=' -f2 | cut -d '!' -f1 | sed -e "s/ //g"`
  NIT000_ZOOM=`echo "( ${NITENDM1} * ${RN_DT} / ${RN_DT_ZOOM} ) + 1" | bc`
  NITEND_ZOOM=`echo "( ${NITENDM1} * ${RN_DT} / ${RN_DT_ZOOM} ) + ${NDAYS} * 86400 / ${RN_DT_ZOOM}" | bc`
  ##--
  sed -e "s/CCCC/${CONFIG}/g ; s/OOOO/${CASE}/g ; s/IIII/${YEAR0}0101/g ; s/NIT000/${NIT000_ZOOM}/g ; s/NITEND/${NITEND_ZOOM}/g" ${iZOOM}_namelist > tmp
  mv -f tmp ${iZOOM}_namelist
done

rm -f namelist_ice
cp -p namelist_ice_nemo_GENERIC_${CONFPAR} namelist_ice

#############################################################
###-- prepare script that will be used to compress outputs :

STOCKDIR2=`echo $STOCKDIR |sed -e "s/\//\\\\\\\\\//g"`
WORKDIR2=`echo $WORKDIR  |sed -e "s/\//\\\\\\\\\//g"`

sed -e "s/CCCC/${CONFIG}/g ; s/cccc/${CONFPAR}/g ; s/OOOO/${CASE}/g ; s/SSSS/${STOCKDIR2}/g ; s/WWWW/${WORKDIR2}/g ; s/YYYY/${YEAR}/g ; s/NNNN/${NRUN}/g ; s/ZZZZ/${NZOOM}/g ; s/UUUU/${NITEND}/g" compress_nemo_GENERIC.sh > compress_nemo_${NRUN}.sh

chmod +x compress_nemo_${NRUN}.sh

#=======================================================================================
#=======================================================================================
# 2- Manage links to input files
#=======================================================================================
#=======================================================================================

echo " "
date
echo " "
echo " Linking input files from ${INPUTDIR}"

DATE0=`grep nn_date0 namelist | head -1 | awk '{print $3}'`
Y0=`echo $DATE0 | cut -c 1-4`
M0=`echo $DATE0 | cut -c 5-6`

YEARm1=`expr $YEAR - 1`
if [ $YEARm1 -lt 1000 ]; then
  YEARm1="0$YEARm1"
fi
# because no data before:
if [ $YEAR -eq $Y0 ]; then
  YEARm1=$Y0
fi
YEARp1=`expr $YEAR + 1`
if [ $YEARp1 -lt 1000 ]; then
  YEARp1="0$YEARp1"
fi

##########
##-- import files that are not time dependent if not already there

#rm -f K1rowdrg.nc M2rowdrg.nc mask_itf.nc
#ln -s -v ${INPUTDIR}/alltides_${CONFIG}.nc K1rowdrg.nc
#ln -s -v ${INPUTDIR}/alltides_${CONFIG}.nc M2rowdrg.nc
#ln -s -v ${INPUTDIR}/alltides_${CONFIG}.nc mask_itf.nc

if [ $CONFPAR == "trop075" ]; then
  rm -f ahmcoef.nc
  ln -s -v ${INPUTDIR}/ahmcoef_${CONFPAR}.nc ahmcoef.nc
fi

rm -f bathy_meter.nc
ln -s -v ${INPUTDIR}/bathy_meter_${CONFPAR}.nc bathy_meter.nc

rm -f dmp_mask.nc
ln -s -v ${INPUTDIR}/dmp_mask_${CONFPAR}.nc dmp_mask.nc

rm -f bfr_coef.nc
ln -s -v ${INPUTDIR}/bfr_coef_${CONFPAR}.nc bfr_coef.nc

rm -f dist_coast.nc
ln -s -v ${INPUTDIR}/dist_coast_${CONFPAR}.nc dist_coast.nc

rm -f mask_itf.nc
ln -s -v ${INPUTDIR}/mask_itf_${CONFPAR}.nc mask_itf.nc

rm -f tides.nc
ln -s -v ${INPUTDIR}/tides_${CONFPAR}.nc tides.nc

#rm -f isf_draft_meter.nc
#ln -s -v ${INPUTDIR}/isf_draft_meter_${CONFPAR}.nc isf_draft_meter.nc

rm -f chlorophyll.nc
ln -s -v ${INPUTDIR}/chlorophyll_${CONFPAR}.nc chlorophyll.nc

#rm -f runoff.nc
#ln -s -v ${INPUTDIR}/runoff_${CONFPAR}.nc runoff.nc
rm -f runoff_isf.nc
#ln -s -v ${INPUTDIR}/runoff_isf_${CONFPAR}.nc runoff_isf.nc
if [ ${YEAR} -le 1990 ]; then
  ln -s -v ${INPUTDIR}/runoff_Scenario1990_GNM.nc runoff_isf.nc
else
  ln -s -v ${INPUTDIR}/runoff_isf_interp_${YEAR}.nc  runoff_isf.nc
fi

rm -f calving.nc
ln -s -v ${INPUTDIR}/calving_${CONFPAR}.nc calving.nc

rm -f coordinates.nc
ln -s -v ${INPUTDIR}/coordinates_${CONFPAR}.nc coordinates.nc

for iZOOM in $(seq 1 ${NZOOM})
do

  #rm -f ${iZOOM}_K1rowdrg.nc ${iZOOM}_M2rowdrg.nc ${iZOOM}_mask_itf.nc
  #ln -s -v ${INPUTDIR}/${iZOOM}_alltides_${CONFPAR}_time_K1.nc        ${iZOOM}_K1rowdrg.nc
  #ln -s -v ${INPUTDIR}/${iZOOM}_alltides_${CONFPAR}_time_M2.nc        ${iZOOM}_M2rowdrg.nc
  #ln -s -v ${INPUTDIR}/${iZOOM}_alltides_${CONFPAR}_time_tmaskitf.nc  ${iZOOM}_mask_itf.nc

  rm -f ${iZOOM}_bathy_meter.nc
  ln -s -v ${INPUTDIR}/${iZOOM}_bathy_meter_${CONFPAR}.nc ${iZOOM}_bathy_meter.nc

  rm -f ${iZOOM}_isf_draft_meter.nc
  ln -s -v ${INPUTDIR}/${iZOOM}_isf_draft_meter_${CONFPAR}.nc ${iZOOM}_isf_draft_meter.nc

  rm -f ${iZOOM}_chlorophyll.nc
  ln -s -v ${INPUTDIR}/${iZOOM}_chlorophyll_${CONFPAR}.nc ${iZOOM}_chlorophyll.nc

  rm -f ${iZOOM}_runoff.nc
  ln -s -v ${INPUTDIR}/${iZOOM}_runoff_${CONFPAR}.nc ${iZOOM}_runoff.nc

  rm -f ${iZOOM}_coordinates.nc
  ln -s -v ${INPUTDIR}/${iZOOM}_coordinates_${CONFPAR}.nc ${iZOOM}_coordinates.nc

done

###########
###-- import Boundary Conditions (BDYs) 
###   (it is assumed that you use a coordinates_bdy.nc file)
#
#rm -f coordinates_bdy.nc
#ln -s -v ${INPUTDIR}/coordinates_bdy_${CONFIG}.nc coordinates_bdy.nc
#
#for AN in $YEARm1 $YEAR $YEARp1
#do
#
#  rm -f bdyT_tra_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyT_tra_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyT_tra_y${AN}_${CONFIG}.nc bdyT_tra_y${AN}.nc
#  fi
#
#  rm -f bdyU_u2d_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyU_u2d_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyU_u2d_y${AN}_${CONFIG}.nc bdyU_u2d_y${AN}.nc
#  fi
#
#  rm -f bdyU_u3d_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyU_u3d_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyU_u3d_y${AN}_${CONFIG}.nc bdyU_u3d_y${AN}.nc
#  fi
#
#  rm -f bdyV_u2d_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyV_u2d_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyV_u2d_y${AN}_${CONFIG}.nc bdyV_u2d_y${AN}.nc
#  fi
#
#  rm -f bdyV_u3d_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyV_u3d_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyV_u3d_y${AN}_${CONFIG}.nc bdyV_u3d_y${AN}.nc
#  fi
#
#  rm -f bdyT_ice_y${AN}.nc
#  if [ -f ${BDYDIR}/bdyT_ice_y${AN}_${CONFIG}.nc ]; then
#    ln -s -v ${BDYDIR}/bdyT_ice_y${AN}_${CONFIG}.nc bdyT_ice_y${AN}.nc
#  fi
#
#done
#
### TIDES :
#for HARM in `grep clname namelist_nemo_GENERIC_${CONFIG} | awk '{print $3}' |sed -e "s/'//g"`
#do
#  ln -s -v ${INPUTDIR}/BDY_TIDES/bdytide_${CONFIG}_${HARM}_grid_T.nc bdytide_${HARM}_grid_T.nc
#  ln -s -v ${INPUTDIR}/BDY_TIDES/bdytide_${CONFIG}_${HARM}_grid_U.nc bdytide_${HARM}_grid_U.nc
#  ln -s -v ${INPUTDIR}/BDY_TIDES/bdytide_${CONFIG}_${HARM}_grid_V.nc bdytide_${HARM}_grid_V.nc
#done

### PATCH ##
#rm -f bdyT_ice.nc
#ln -s -v ${BDYDIR}/bdyT_ice_y${YEAR}_${CONFIG}.nc bdyT_ice.nc

##########
##-- atmospheric forcing

rm -f w_bilin.nc w_bicubic.nc
ln -s -v ${INPUTDIR}/weights_bilin_DFS_${CONFIG}.nc    w_bilin.nc
ln -s -v ${INPUTDIR}/weights_bicubic_DFS_${CONFIG}.nc  w_bicubic.nc

for iZOOM in $(seq 1 ${NZOOM})
do
  rm -f ${iZOOM}_w_bilin.nc ${iZOOM}_w_bicubic.nc
  ln -s ${INPUTDIR}/${iZOOM}_weights_bilin_DFS_${CONFIG}.nc    ${iZOOM}_w_bilin.nc
  ln -s ${INPUTDIR}/${iZOOM}_weights_bicubic_DFS_${CONFIG}.nc  ${iZOOM}_w_bicubic.nc
done

for AN in $YEARm1 $YEAR $YEARp1
do
  for ATM in t2 q2 u10 v10 radlw radsw precip snow
  do
    rm -f ${ATM}_y${AN}.nc
    if [ -f ${FORCINGdir}/drowned_${ATM}_DFS5.2_y${AN}.nc ]; then
      ln -s -v ${FORCINGdir}/drowned_${ATM}_DFS5.2_y${AN}.nc ${ATM}_y${AN}.nc
    fi
  done
  if [ $AN -ge 1979 ] && [ $AN -lt 2017 ]; then
    rm -f tcc_y${AN}.nc
    if [ -f ${FORCINGdir}/drowned_tcc_ERAinterim_y${AN}.nc ]; then
      ln -s -v ${FORCINGdir}/drowned_tcc_ERAinterim_y${AN}.nc tcc_y${AN}.nc
    fi
  else
    rm -f tcc.nc
    if [ -f ${FORCINGdir}/drowned_tcc_ERAinterim_1y_CLIM.nc ]; then
      ln -s -v ${FORCINGdir}/drowned_tcc_ERAinterim_1y_CLIM.nc tcc.nc
    fi
  fi
done
if [ $YEAR -ge 1979 ] && [ $AN -lt 2017 ]; then
 sed -e "s#<TCC_FREQ>#    24    #g ; s#<TCC_INTERP>#   .true. #g ; s#<TCC_CLIM># .false.  #g" namelist > tmp
 mv tmp namelist 
else
 sed -e "s#<TCC_FREQ>#   -12    #g ; s#<TCC_INTERP>#  .false. #g ; s#<TCC_CLIM>#  .true.  #g" namelist > tmp
 mv tmp namelist
fi


##########
##-- SSS restoring if any :

SSSREL=`grep " nn_sssr " namelist_nemo_GENERIC_${CONFIG} | awk '{print $3}'`

if [ $SSSREL -gt 0 ]; then
  echo "Run with SSS relaxation : nn_sssr = $SSSREL"
  #for AN in $YEARm1 $YEAR $YEARp1
  #do
  #  rm -f sss_data_y${AN}.nc
  #  if [ -f ${SSSDIR}/SST_SSS_${GFDL_SIM}_on_${CONFIG}_${AN}.nc ]; then
  #    ln -s -v ${SSSDIR}/SST_SSS_${GFDL_SIM}_on_${CONFIG}_${AN}.nc sss_data_y${AN}.nc
  #  else
  #    echo "WARNING: ${SSSDIR}/SST_SSS_${GFDL_SIM}_on_${CONFIG}_${AN}.nc does not exist   >>>>> skipped" 
  #  fi
  #done
  rm -f sss_data.nc
  ln -s -v ${INPUTDIR}/sss_${CONFIG}.nc sss_data.nc
else
  echo "Run without SSS relaxation ( nn_sssr = $SSSREL )"
fi

##########
##-- Initial state or Restart

rm -f Ice_initialization.nc
ln -s -v ${INPUTDIR}/Ice_initialization_${CONFPAR}.nc Ice_initialization.nc

rm -f restart.nc restart_ice_in.nc #restart_icebergs_????.nc
rm -f dta_temp.nc dta_sal.nc
rm -f dmp_temp.nc dmp_sal.nc
RSTN=`grep "from a restart file" namelist | awk '{print $3}' | sed -e "s/\.//g"`
NIT_RST=${NITENDM1}
if [ $RSTN == "true" ]; then
  if [ $NIT_RST -eq 0 ]; then
    echo "Starting from previously built restart files"
    ln -s -v ${INPUTDIR}/${CONFPAR}_restart_00000000.nc restart.nc
    ln -s -v ${INPUTDIR}/${CONFPAR}_restart_ice_00000000.nc restart_ice_in.nc
  else
    #if [ ! -f restart_${NIT_RST}.nc ] || [ ! -f restart_${NIT_RST}.obc ]; then
    if [ ! -f restart_${NIT_RST}.nc ]; then
      echo "Copy ocean restart file from ${STOCKDIR}/restart/nemo_${CONFIG}-${CASE}"
      cp -p ${STOCKDIR}/restart/nemo_${CONFIG}_${CASE}/restart_${NIT_RST}.nc .
    fi
    ln -s -v restart_${NIT_RST}.nc   restart.nc
    if [ ! -f restart_ice_${NIT_RST}.nc ]; then
      echo "Copy ice restart file from ${STOCKDIR}/restart/nemo_${CONFIG}-${CASE}"
      cp -p ${STOCKDIR}/restart/nemo_${CONFIG}_${CASE}/restart_ice_${NIT_RST}.nc .
    fi
    ln -s -v restart_ice_${NIT_RST}.nc   restart_ice_in.nc
    if [ ! -f restart_icebergs_${NIT_RST}.tar ]; then
      echo "Copy iceberg restart file from ${STOCKDIR}/restart/nemo_${CONFIG}-${CASE}"
      cp -p ${STOCKDIR}/restart/nemo_${CONFIG}_${CASE}/restart_icebergs_${NIT_RST}.tar .
    fi
    rm -f restart_icebergs_????.nc.[1-9] restart_icebergs_????.nc.[0-9][0-9] restart_icebergs_????.nc.[0-9][0-9][0-9]
    tar xvf restart_icebergs_${NIT_RST}.tar
    for file in restart_icebergs_????.nc.[1-9] restart_icebergs_????.nc.[0-9][0-9] restart_icebergs_????.nc.[0-9][0-9][0-9]
    do
        if [ -f $file ]; then
          file2=`echo $file |cut -c 1-24`
          mv -f $file $file2
        fi
    done
  fi
  ln -s -v ${INPUTDIR}/dmp_temp_${CONFPAR}.nc dmp_temp.nc
  ln -s -v ${INPUTDIR}/dmp_sal_${CONFPAR}.nc  dmp_sal.nc
else
  echo "Not in restart mode -> import initial T,S state"
  ln -s -v ${INPUTDIR}/dta_temp_${CONFPAR}.nc dta_temp.nc
  ln -s -v ${INPUTDIR}/dmp_temp_${CONFPAR}.nc dmp_temp.nc
  ln -s -v ${INPUTDIR}/dta_sal_${CONFPAR}.nc  dta_sal.nc
  ln -s -v ${INPUTDIR}/dmp_sal_${CONFPAR}.nc  dmp_sal.nc
fi

for iZOOM in $(seq 1 ${NZOOM})
do

  rm -f ${iZOOM}_restart.nc ${iZOOM}_restart_ice_in.nc
  rm -f ${iZOOM}_dta_temp_y????m??.nc ${iZOOM}_dta_sal_y????m??.nc ${iZOOM}_dta_temp.nc ${iZOOM}_dta_sal.nc
  RSTN=`grep "from a restart file" namelist | awk '{print $3}' | sed -e "s/\.//g"`
  NIT_RST=${NITENDM1}
  if [ $RSTN == "true" ]; then
    if [ $NIT_RST -eq 0 ]; then
      ln -s -v ${INPUTDIR}/${iZOOM}_${CONFPAR}_restart_00000000.nc ${iZOOM}_restart.nc
      ln -s -v ${INPUTDIR}/${iZOOM}_${CONFPAR}_restart_ice_00000000.nc ${iZOOM}_restart_ice_in.nc
    else
      if [ ! -f ${iZOOM}_restart_${NIT_RST}.nc ]; then
        echo "Copy zoom ocean restart file from ${STOCKDIR}/restart/nemo_${CONFIG}-${CASE}"
        cp -p ${STOCKDIR}/restart/nemo_${CONFIG}_${CASE}/${iZOOM}_restart_${NIT_RST}.nc .
      fi
      ln -s -v ${iZOOM}_restart_${NIT_RST}.nc   ${iZOOM}_restart.nc
      if [ ! -f ${iZOOM}_restart_ice_${NIT_RST}.nc ]; then
        echo "Copy zoom ice restart file from ${STOCKDIR}/restart/nemo_${CONFIG}-${CASE}"
        cp -p ${STOCKDIR}/restart/nemo_${CONFIG}_${CASE}/${iZOOM}_restart_ice_${NIT_RST}.nc .
      fi
      ln -s -v ${iZOOM}_restart_ice_${NIT_RST}.nc   ${iZOOM}_restart_ice_in.nc
    fi
  else
    echo "Not in restart mode -> import initial T,S state for the zoom"
    if [ ! -f ${iZOOM}_dta_temp_${CONFIG}_y${Y0}m${M0}.nc ] || [ ! -f ${iZOOM}_dta_sal_${CONFIG}_y${Y0}m${M0}.nc ]; then
      echo "Copy zoom initial state from ${INPUTDIR}"
      cp -p ${INPUTDIR}/${iZOOM}_dta_temp_${CONFPAR}_y${Y0}m${M0}.nc
      cp -p ${INPUTDIR}/${iZOOM}_dta_sal_${CONFPAR}_y${Y0}m${M0}.nc
    fi
    ln -s -v ${iZOOM}_dta_temp_${CONFPAR}_y${Y0}m${M0}.nc ${iZOOM}_dta_temp_y${Y0}m${M0}.nc
    ln -s -v ${iZOOM}_dta_sal_${CONFPAR}_y${Y0}m${M0}.nc  ${iZOOM}_dta_sal_y${Y0}m${M0}.nc
  fi

done

echo " "
echo "Import (links+copy) of input files completed."
echo " "
echo "Launching the long nemo simulation"
echo " "

#=======================================================================================
#=======================================================================================
# 3- Run script
#=======================================================================================
#=======================================================================================

rm -f app.conf
echo "0-$(( NB_NPROC_IOS - 1 )) xios_server.exe"          >  app.conf
echo "${NB_NPROC_IOS}-$(( SLURM_NTASKS - 1 )) nemo.exe "  >> app.conf

date
echo " "

srun --mpi=pmi2  -m cyclic \
    --cpu_bind=map_cpu:0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\
    --multi-prog  ./app.conf

#srun --mpi=pmi2 --multi-prog  ./app.conf

echo " "
date
echo " "

##-- export and compress output files:

if [ ! -d OUTPUT_${NRUN} ]; then
  mkdir OUTPUT_${NRUN}
fi

mv -f ${CONFIG}-${CASE}_[1-5][d-m]_*nc OUTPUT_${NRUN}/.
mv -f namelist                     OUTPUT_${NRUN}/namelist.${NRUN}
mv -f namelist_ice                 OUTPUT_${NRUN}/namelist_ice.${NRUN}
mv -f ocean.output                 OUTPUT_${NRUN}/ocean.output.${NRUN}

for iZOOM in $(seq 1 ${NZOOM})
do
  mv -f ${iZOOM}_${CONFPAR}-${CASE}_[1-5][d-m]_*nc  OUTPUT_${NRUN}/.
  mv -f ${iZOOM}_namelist                       OUTPUT_${NRUN}/${iZOOM}_namelist.${NRUN}
  mv -f ${iZOOM}_namelist_ice                   OUTPUT_${NRUN}/${iZOOM}_namelist_ice.${NRUN}
  mv -f ${iZOOM}_ocean.output                       OUTPUT_${NRUN}/${iZOOM}_ocean.output.${NRUN}
done

## used to know how many multiple output files are created (in xios mode "multiple_file")
echo "xxx $NB_NPROC_IOS xios_server.exe xxx" > OUTPUT_${NRUN}/app.copy

##########################################################
##-- prepare next run if every little thing went all right

NTEST_O=`ls -1 OUTPUT_${NRUN}/${CONFIG}-${CASE}_[1-5][d-m]_*nc |wc -l`
NTEST_R=`ls -1 ${CONFIG}-${CASE}_*_restart_*.nc |wc -l`

if [ ${NTEST_O} -gt 0 ] && [ ${NTEST_R} -gt 0 ]; then

  sbatch ./compress_nemo_${NRUN}.sh

  ##-- write last restart time step of mother grid in prod_nemo.db:
  LAST_RESTART_NIT=`ls -lrt ${CONFIG}-${CASE}_*_restart_*.nc |tail -1 | sed -e "s/${CONFIG}-${CASE}//g" | cut -d '_' -f2`
  echo " "
  echo "Last restart created at ocean time step ${LAST_RESTART_NIT}"
  echo "  ---> writting this date in prod_nemo.db"
  echo " "
  echo "$LAST_RESTART_NIT" > restart_nit.txt
  ##-- add last restart time step on chidren grids (at the end of last line in prod_nemo.db):
  for iZOOM in $(seq 1 ${NZOOM})
  do
    LAST_RESTART_NIT_ZOOM=`ls -lrt ${iZOOM}_${CONFIG}-${CASE}_*_restart_*.nc |tail -1 | sed -e "s/${iZOOM}_${CONFIG}-${CASE}//g" | cut -d '_' -f2`
    sed -e "`wc -l prod_nemo.db|cut -d ' ' -f1`s/$/ ${LAST_RESTART_NIT_ZOOM}/g" prod_nemo.db > tmp
    mv tmp prod_nemo.db
    echo " "
    echo "Last restart created for zoom nb $iZOOM at ocean time step ${LAST_RESTART_NIT_ZOOM}"
    echo "  ---> writting this date in prod_nemo.db"
    echo " "
    echo "$LAST_RESTART_NIT_ZOOM" > ${iZOOM}_restart_nit.txt
  done

  echo " "
  date
  echo " "

  ## rebuild restart file for mother grid :
  FILEBASE=`ls -1 ${CONFIG}-${CASE}_[0-9]???????_restart_0000.nc | sed -e "s/_0000.nc//g"`
  NDOMAIN=`ls -1 ${CONFIG}-${CASE}_[0-9]???????_restart_[0-9]???.nc | wc -l`
  cat > nam_rebuild << EOF
  &nam_rebuild
  filebase='${FILEBASE}'
  ndomain=${NDOMAIN}
  /
EOF
  cat nam_rebuild
  echo " "
  echo "./rebuild_nemo.exe"
  ./rebuild_nemo.exe
  if [ -f ${FILEBASE}.nc ]; then
    LAST_RESTART_NIT_ZOOM=`echo ${FILEBASE} | sed -e "s/${CONFIG}-${CASE}_//g" | cut -d '_' -f1`
    mv  ${FILEBASE}.nc restart_${LAST_RESTART_NIT_ZOOM}.nc
    rm -f ${FILEBASE}_[0-9]???.nc
  else
    echo "~!@#%^& PROBLEM WITH REBUILD OF ${FILEBASE}.nc >>>>>>>>>>>>>>> stop !!!"
    exit
  fi

  echo " "
  date
  echo " "

  ## rebuild restart_ice file for mother grid :
  FILEBASE=`ls -1 ${CONFIG}-${CASE}_[0-9]???????_restart_ice_0000.nc | sed -e "s/_0000.nc//g"`
  NDOMAIN=`ls -1 ${CONFIG}-${CASE}_[0-9]???????_restart_ice_[0-9]???.nc | wc -l`
  cat > nam_rebuild << EOF
  &nam_rebuild
  filebase='${FILEBASE}'
  ndomain=${NDOMAIN}
  /
EOF
  cat nam_rebuild
  echo " "
  echo "./rebuild_nemo.exe"
  ./rebuild_nemo.exe
  if [ -f ${FILEBASE}.nc ]; then
    LAST_RESTART_NIT_ZOOM=`echo ${FILEBASE} | sed -e "s/${CONFIG}-${CASE}_//g" | cut -d '_' -f1`
    mv  ${FILEBASE}.nc restart_ice_${LAST_RESTART_NIT_ZOOM}.nc
    rm -f ${FILEBASE}_[0-9]???.nc
  else
    echo "~!@#%^& PROBLEM WITH REBUILD OF ${FILEBASE}.nc >>>>>>>>>>>>>>> stop !!!"
    exit
  fi

  # prepare next iceberg restart:
  for file in icebergs_restart_????.nc
  do
    file2=`echo $file | sed -e "s/icebergs_restart/restart_icebergs/"`
    mv $file ${file2}.${NRUN}
  done
  tar cvf restart_icebergs_${LAST_RESTART_NIT}.tar restart_icebergs_????.nc.${NRUN}
  if [ -f restart_icebergs_${LAST_RESTART_NIT}.tar ]; then
    echo "restart_icebergs_${LAST_RESTART_NIT}.tar [oK]"
    rm -f restart_icebergs_????.nc.${NRUN}
  else
    echo "~!@#%^&* ERROR: restart_icebergs_${LAST_RESTART_NIT}.tar has not been created >>>>> stop"
    exit
  fi

  # prepare iceberg stats:
  for file in icebergs.stat_????
  do
    mv $file ${file}.${NRUN}
  done
  tar cvf icebergs.stat_${LAST_RESTART_NIT}.tar icebergs.stat_????.${NRUN}
  if [ -f icebergs.stat_${LAST_RESTART_NIT}.tar ]; then
    echo "icebergs.stat_${LAST_RESTART_NIT}.tar [oK]"
    rm -f icebergs.stat_????.${NRUN}
    mv icebergs.stat_${LAST_RESTART_NIT}.tar OUTPUT_${NRUN}/.
  else
    echo "~!@#%^&* ERROR: icebergs.stat_${LAST_RESTART_NIT}.tar has not been created >>>>> stop"
    exit
  fi

  # prepare iceberg trajectory files:
  tar cvf trajectory_icebergs_${LAST_RESTART_NIT}.tar trajectory_icebergs_${LAST_RESTART_NIT}_????.nc
  if [ -f trajectory_icebergs_${LAST_RESTART_NIT}.tar ]; then
    echo "trajectory_icebergs_${LAST_RESTART_NIT}.tar [oK]"
    rm -f trajectory_icebergs_${LAST_RESTART_NIT}_????.nc
    mv trajectory_icebergs_${LAST_RESTART_NIT}.tar OUTPUT_${NRUN}/.
  else
    echo "~!@#%^&* ERROR: trajectory_icebergs_${LAST_RESTART_NIT}.tar has not been created >>>>> stop"
    exit
  fi


  echo " "
  date
  echo " "

  # prepare initial state for following iteration:
  NRUNm1=$NRUN 
  NRUNm2=`expr $NRUN - 1`
  NRUN=`expr $NRUN + 1`
  TMPTMP="${LAST_RESTART_NIT}"
  for iZOOM in $(seq 1 ${NZOOM})
  do
    LAST_RESTART_NIT_ZOOM=`cat ${iZOOM}_restart_nit.txt`
    TMPTMP="${TMPTMP} ${LAST_RESTART_NIT_ZOOM}"
  done
  echo "${NRUN} ${YEARf} ${MONTHf} ${DAYf} ${TMPTMP}" >> prod_nemo.db    ## new line

  # clean WORKDIR:
  YEARm2=`expr $YEAR - 2`
  if [ $YEARm2 -lt 1000 ]; then
    YEARm2="0$YEARm2"
  fi
  for ATM in u10 v10 radsw radlw t2 q2 precip snow tcc
  do
    rm -f ${ATM}_y${YEARm2}.nc
    for iZOOM in $(seq 1 $NZOOM)
    do
      rm -f ${iZOOM}_${ATM}_y${YEARm2}.nc
    done
  done
  #rm -f bdyT_tra_y${YEARm2}.nc
  #rm -f bdyU_u?d_y${YEARm2}.nc
  #rm -f bdyV_u?d_y${YEARm2}.nc
  #rm -f bdyT_ice_y${YEARm2}.nc

else

  echo ' '
  echo '!@#$%^&* BIG PROBLEM : no output or no restart files created for NEMO !! >>>>>>> STOP'
  exit

fi

##########################################################
##-- launch next year of the experiment

sbatch ./run_nemo.sh 

echo " "
date
